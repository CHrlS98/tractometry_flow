process {
    tag={ "${sid} - ${bname}" }
    publishDir={"./results_tractometry/$sid/$task.process"}
    scratch=true
    errorStrategy='retry'
    maxRetries=1
    stageInMode='copy'
    stageOutMode='rsync'
    afterScript='sleep 1'
}

params {
    //**Output directory**//
    output_dir=false

    nb_points=20
    use_provided_centroids=true
    skip_projection_endpoints_metrics=true
    bundle_suffix_to_remove='_m_cleaned'

    colors=[
        'AF_L':     '0xcc0000',
        'AF_R':     '0xffdf0f',
        'CC_1':     '0x02d983',
        'CC_2a':    '0x0d6cbf',
        'CC_2b':    '0xbf0099',
        'CC_3':     '0xf20505',
        'CC_4':     '0x9ad909',
        'CC_5':     '0x04bf74',
        'CC_6':     '0x0418cc',
        'CC_7':     '0xe605b9',
        'CG_L':     '0xff6f00',
        'CG_R':     '0x89bf0b',
        'CR_L':     '0x14ffa1',
        'CR_R':     '0x0f27ff',
        'CST_L':    '0xd90452',
        'CST_R':    '0xbf5504',
        'ICP_L':    '0xb8ff12',
        'ICP_R':    '0x08c5cc',
        'IFOF_L':   '0x5a0ff2',
        'IFOF_R':   '0xff0862',
        'ILF_L':    '0xe56a0b',
        'ILF_R':    '0x3ccc08',
        'MCP':      '0x13ebf2',
        'OR_L':     '0x4e0ecc',
        'OR_R':     '0xbf0c4d',
        'SLF_1_L':  '0xd9bd09',
        'SLF_1_R':  '0x02f22a',
        'SLF_2_L':  '0x0074d9',
        'SLF_2_R':  '0xa809d9',
        'SLF_3_L':  '0xbfa708',
        'SLF_3_R':  '0x08bf26',
        'UF_L':     '0x0d8eff',
        'UF_R':     '0xc60dff',
    ]

    mean_std_density_weighting=true
    mean_std_per_point_density_weighting=true
    endpoints_metric_stats_normalize_weights=true
    voxel_label_map_upsample=1

    statsPublishDir="./results_tractometry/Statistics"
    plotPublishDir="./results_tractometry/Plots"

    processes=false
}

if(params.processes) {
    if(params.processes > Runtime.runtime.availableProcessors()) {
        throw new RuntimeException("Number of processes higher than available CPUs.")
    }
    else if(params.processes < 1) {
        throw new RuntimeException("When set, number of processes must be >= 1 " +
                                   "and smaller or equal to the number of CPUs.")
    }
    else {
        executor.$local.cpus=params.processes
    }
}

if(params.output_dir) {
    process.publishDir = {"$params.output_dir/$sid/$task.process"}
}

singularity.autoMounts=true

profiles {
    macos {
            process.scratch="/tmp"
    }
}
